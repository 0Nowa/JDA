import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

def versionObj = new Version(major: 1, minor: 2, revision: 0)
group = "net.dv8tion"
archivesBaseName = "JDA"
version = "${versionObj.toString()}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

def filteredSourceDir = file("${buildDir}/filtered")

sourceSets {
    // This source set will contain all sources that we filter 
    filtered {
        java {
            srcDirs = [
                    filteredSourceDir,
                    "src/test/java",

                    "src/examples/java"
            ]
        }
    }
}



// copy the main sources and filter any '@buildVersion@' occurences. 
task processVersion (type: Copy) {
    from sourceSets.main.java
    into filteredSourceDir
    filter(ReplaceTokens, tokens: [
            versionMajor: versionObj.getMajor(),
            versionMinor: versionObj.getMinor(),
            versionRevision: versionObj.getRevision(),
            versionBuild: versionObj.getBuild()
    ])
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.filtered.java
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {

    manifest {
        attributes 'Implementation-Version': version

    }
    baseName = project.name + '-withDependencies'
    from { configurations.compile.collect {
        dependency ->
        if (configurations.filteredRuntime.contains(dependency))//If we defined it as a special lib, just add it directly
        {
//            System.out.println("Not unzipping: " + dependency.getName() + ", contains service related code. See ServiceUtil.");
            return dependency
        }
        if (dependency.isDirectory()) { //If it is a folder, just include the folder in its entirety
            return dependency
        } else {    //If it isn't a folder, put it in a zipTree. if it is a zip or jar, we will be able to preform actions on it
            def unZippped = zipTree(dependency)
            if (unZippped.any {
                file ->
                String filePath = file.getAbsolutePath()
                return filePath.contains("META-INF") && filePath.contains("services")
                })
            {
                throw new GradleException("Found a jar dependency containing services but not dealt with in filteredRuntime!");
            }
            else
            {
                return unZippped;
            }
        }
    }}
    with jar
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}
repositories {
    mavenCentral()

    maven {
        url "http://lius4compass.googlecode.com/svn-history/r65/maven2/"
    }
}

dependencies {
    //General Utility
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.json:json:20150729'

    //Native Library Support
    compile 'net.java.dev.jna:jna:4.1.0'

    //Web Connection Support
    compile 'com.neovisionaries:nv-websocket-client:1.16'
    compile 'com.mashape.unirest:unirest-java:1.4.7'

    //Audio Support
    compile 'com.googlecode.soundlibs:mp3spi:1.9.5-1'
    compile 'com.googlecode.soundlibs:tritonus-share:0.3.7-2'
    compile 'org.tritonus:tritonus-remaining:0.3.6'

    //Used to define what libraries should be included as JARs, not have their internals extracted into FatJar.
    //Needed for properly dealing with services.
    filteredRuntime 'com.googlecode.soundlibs:tritonus-share:0.3.7-2'
    filteredRuntime 'com.googlecode.soundlibs:mp3spi:1.9.5-1'
    filteredRuntime 'org.tritonus:tritonus-remaining:0.3.6'
}

class Version {
    int major, minor, revision

    String getMajor() {
        "${major}"
    }

    String getMinor() {
        "${minor}"
    }

    String getRevision() {
        "${revision}"
    }

    String getBuild() {
        System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : "DEV"
    }

    String toString() {
        "${getMajor()}.${getMinor()}.${getRevision()}_${getBuild()}"
    }
}

uploadArchives {
  onlyIf {
    System.getenv("BUILD_NUMBER")
  }
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'JDA'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'A wrapping of the Discord REST api and its Websocket-Events for Java.'
        url 'https://github.com/DV8FromTheWorld/JDA'

        scm {
          connection 'scm:git:git@github.com:DV8FromTheWorld/JDA.git'
          developerConnection 'scm:git:git@github.com:DV8FromTheWorld/JDA.git'
          url 'scm:git:git@github.com:DV8FromTheWorld/JDA.git'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'DV8FromTheWorld'
            name 'Austin Keener'
            email 'keeneraustin@yahoo.com'
          }
          developer {
            id 'Kantekugel'
            name 'Michael Ritter'
            email 'ritter.michael92@gmail.com'
          }
        }
      }
    }
  }
}

// tell the compileJava task to compile the filtered source 
compileJava.source = sourceSets.filtered.java
compileJava.dependsOn processVersion

//Creates the w/ dependencies jar.
uploadArchives.dependsOn fatJar
