//use: gradlew clean build fatJar signArchives install bintrayUpload
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.jfrog.bintray' version '1.7.2'
    id 'java'
    id 'maven'
    id 'signing'
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

def versionObj = new Version(major: 3, minor: 0, revision: "ALPHA")

group = "net.dv8tion"
archivesBaseName = "JDA"
version = "$versionObj"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //General Utility
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.json:json:20160810'

    //Native Library Support
    compile 'net.java.dev.jna:jna:4.2.2'

    //Web Connection Support
    compile 'com.neovisionaries:nv-websocket-client:1.30'
    compile ( 'com.mashape.unirest:unirest-java:1.4.9' ) {
        exclude group: 'junit', module: 'junit'
    }

    testCompile 'junit:junit:4.12'
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            versionMajor: versionObj.major.toString(),
            versionMinor: versionObj.minor.toString(),
            versionRevision: versionObj.revision.toString(),
            versionBuild: versionObj.build.toString()
        ])
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
    include "net/dv8tion/jda/**"
    include "com/iwebpp/crypto/**"
    include "org/tritonus/**"
    include "tomp2p/opuswrapper/**"
    include "natives/**"
}

shadowJar {
    classifier = "withDepdendencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from "${buildDir}/filteredSrc"
    include "net/dv8tion/jda/**"
    include "com/iwebpp/crypto/**"
    include "org/tritonus/**"
    include "tomp2p/opuswrapper/**"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    failOnError = false
    
    //### excludes ###
    //jda internals
    exclude("net/dv8tion/jda/core/entities/impl/**")
    exclude("net/dv8tion/jda/bot/entities/impl/**")
    exclude("net/dv8tion/jda/client/entities/impl/**")
    
    exclude("net/dv8tion/jda/core/handle")
    exclude("net/dv8tion/jda/core/requests")
    
    //opuswrapper
    exclude("tomp2p/opuswrapper")
    
    //voice crypto
    exclude("com/iwebpp/crypto")
}

artifacts {
    archives javadocJar, sourcesJar, shadowJar
}

signing {
    sign configurations.archives
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey
    pkg {
        repo = 'maven'
        name = 'JDA'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/DV8FromTheWorld/JDA.git'
        filesSpec {
            from ('build/libs') {
                exclude "**withDependencies**"
            }
            from 'build/poms'
            into "${project.group.replace(".", "/")}/${archivesBaseName}/${project.version}"

            rename { String fileName ->
                fileName.replace("pom-default.xml", "${archivesBaseName}-${project.version}.pom")
            }
        }
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

String getProjectProperty(String propertyName)
{
    String property = ""
    if (hasProperty(propertyName))
    {
        property = this.properties[propertyName]
    }
    return property
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

task checksums (dependsOn: [assemble, install, shadowJar]) << {
    project.configurations.getByName('archives').artifacts.each { artifact ->
        if (artifact.file.exists()) {
            project.ant.checksum(file: artifact.file, algorithm: 'md2', todir: artifact.file.parent)    // We don't need all of them,
            project.ant.checksum(file: artifact.file, algorithm: 'md5', todir: artifact.file.parent)    // still have to decide if 
            project.ant.checksum(file: artifact.file, algorithm: 'sha1', todir: artifact.file.parent)   // and if which to create
            project.ant.checksum(file: artifact.file, algorithm: 'sha256', todir: artifact.file.parent)
            project.ant.checksum(file: artifact.file, algorithm: 'sha384', todir: artifact.file.parent)
            project.ant.checksum(file: artifact.file, algorithm: 'sha512', todir: artifact.file.parent)
        }
    }

    def file = file('build/poms/pom-default.xml')
    project.ant.checksum(file: file, algorithm: 'md2', todir: file.parent)
    project.ant.checksum(file: file, algorithm: 'md5', todir: file.parent)
    project.ant.checksum(file: file, algorithm: 'sha1', todir: file.parent)
    project.ant.checksum(file: file, algorithm: 'sha256', todir: file.parent)
    project.ant.checksum(file: file, algorithm: 'sha384', todir: file.parent)
    project.ant.checksum(file: file, algorithm: 'sha512', todir: file.parent)
}

signArchives { 
	onlyIf { !getProjectProperty("signing.keyId").empty }
    onlyIf { !getProjectProperty("signing.password").empty }
    onlyIf { !getProjectProperty("signing.secretKeyRingFile").empty }
}

bintrayUpload {
    dependsOn test
    dependsOn checksums
    
    onlyIf { !getProjectProperty("bintrayUsername").empty }
    onlyIf { !getProjectProperty("bintrayApiKey").empty }
    onlyIf { System.getenv("BUILD_NUMBER") }
}

// ## classes ## 

class Version {
    String major, minor, revision // To be changed to int after alpha

    String getBuild() {
        System.getenv("BUILD_NUMBER") ?: System.getProperty("BUILD_NUMBER") ?: "DEV"
    }

    String toString() {
        "${major}.${minor}.${revision}_$build"
    }
}